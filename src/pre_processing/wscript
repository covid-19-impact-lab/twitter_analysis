from src.shared import TIMESTAMPS


def build(ctx):
    #ctx(
    #    features="run_py_script",
    #    source="pre_process.py",
    #    deps=ctx.path_to(ctx, "OUT_DATA", "data_clean.pkl"),
    #    target=[
    #        ctx.path_to(ctx, "OUT_DATA", "data_processed.pkl"),
    #        ctx.path_to(ctx, "OUT_DATA", "data_processed_train.json"),
    #        ctx.path_to(ctx, "OUT_DATA", "data_processed_test.json"),
    #    ],
    #    name="pre_process",
    #)

    for stamp in TIMESTAMPS:
        ctx(
            features="run_py_script",
            source="detect_language.py",
            deps=ctx.path_to(ctx, "OUT_DATA", "tweets-cleaned", f"{stamp}.parquet"),
            target=ctx.path_to(
                ctx, "OUT_DATA", "detected-languages", f"{stamp}.parquet"
            ),
            append=stamp,
            name=f"detect_language_{stamp}",
        )

    ctx(
        features="run_py_script",
        source="select_tweets_for_labeling.py",
        deps=[
            ctx.path_to(ctx, "OUT_DATA", "tweets-cleaned", f"{stamp}.parquet")
            for stamp in TIMESTAMPS
        ],
        target=ctx.path_to(ctx, "OUT_DATA", "selected_tweets_for_labeling.csv"),
        name="select_tweets_for_labeling",
    )

    for stamp in TIMESTAMPS:
        ctx(
            features="run_py_script",
            source="translate_tweets_with_deepl.py",
            deps=ctx.path_to(ctx, "OUT_DATA", "tweets-cleaned", f"{stamp}.parquet"),
            target=ctx.path_to(
                ctx, "OUT_DATA", "translated-tweets", f"{stamp}.parquet"
            ),
            append=stamp,
            name=f"translated_tweets_{stamp}",
        )
